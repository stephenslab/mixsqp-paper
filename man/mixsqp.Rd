% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/mixopt.R
\name{mixsqp}
\alias{mixsqp}
\title{SQP algorithm with partial QR for optimizing mixtures.}
\usage{
mixsqp(L, x, convtol = 1e-08, pqrtol = 0, eps = 1e-08, sptol = 0.001,
  maxiter = 100, maxqpiter = 100, seed = 1,
  algorithm.version = c("julia", "Rcpp"), verbose = TRUE)
}
\arguments{
\item{L}{\eqn{n x k} data matrix with positive entries. For fitting
mixture models, n is the number of samples and k is the number of
mixture components, and the entries of L are the conditional
likelihoods for each sample (row) and each mixture component
(column).}

\item{x}{Vector of length k containing the initial estimate of the
solution. For fitting mixture models, x is the initial estimate of
the mixture weights.}

\item{convtol}{Tolerance for stopping criterion in SQP method.
TO DO: explain more precisely what the stopping criterion is.}

\item{pqrtol}{Relative precision used to determine number of
factors in QR decomposition of matrix L. See the LowRankApprox
Julia package for details.}

\item{eps}{A small positive number used to stabilize some of the
numerical operations.}

\item{sptol}{All entries of x below this value are treated as zero.}

\item{maxiter}{Maximum number of outer loop iterations.}

\item{maxqpiter}{Maximum number of inner loop iterations for
solving quadratic subproblem.}

\item{seed}{Seed for pseudorandom number generator passed to
function \code{srand} in Julia.}

\item{algorithm.version}{Which implementation to use: C++
(\code{algorithm.version = "Rcpp"}) or Julia
(\code{algorithm.version = "julia"}).}

\item{verbose}{If \code{verbose = TRUE}, print progress of algorithm
to console.}
}
\value{
\code{mixsqp} returns a list containing the following components:
    \item{x}{Estimated solution.}
    \item{totaltime}{Total elapsed time to compute solution.}
    \item{obj}{Value of objective function at each iteration of the
               SQP algorithm.}
    \item{gmin}{Minimum value of the modified objective gradient,
                which is used to assess convergence.}
    \item{nnz}{Number of nonzeros (below \code{sptol}) in solution at
               each iteration.}
    \item{timing}{Elapsed time for each SQP iteration.}
}
\description{
Sequential quadratic programming (SQP) method with
    partial QR-based approximate computation of gradients and Hessians
    for efficiently solving the mixture distribution optimization
    problem.
}
\details{
TO DO: Details about the algorithm go here, such as a
    mathematical description of the optimization problem, and a brief
    description of how the SQP algorithm works.
}
\examples{
# Fit mixture model to "normmix" data set, using partial QR
# decomposition to speed up computation.
data(normmix.data)
L   <- normmix.data$L
out <- mixsqp(L,pqrtol = 1e-8)
cat("Compare SQP solution against the IP solution:\\n")
print(round(data.frame(ip = normmix.data$w,sqp = out$x),digits = 6))

}

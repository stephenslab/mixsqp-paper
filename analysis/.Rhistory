title = "Average time solving the QP subproblem in m") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.9))
# Create a plot comparing the runtime
p10 <- ggplot(data = dat4_2) +
geom_line(aes(x = n,y = t1,color = "interior point (MOSEK)"),size = 1) +
geom_line(aes(x = n,y = t2,color = "active-set"),size = 1) +
geom_point(aes(x = n,y = t1,color = "interior point (MOSEK)"),
shape = 20,size = 3) +
geom_point(aes(x = n,y = t2,color = "active-set"),shape = 20,size = 3) +
scale_x_continuous(trans = "log10",breaks = c(1e3,1e4,4e5)) +
scale_y_continuous(trans = "log10",breaks = c(0.0005,0.001,0.002,0.004),limits=c(0.0004,0.004)) +
scale_color_manual(values = colors[c(6,2)],name = "") +
labs(x     = "number of rows in L (n)",
y     = "runtime (seconds)",
title = "Average time solving the QP subproblem in n") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.5))
# Create a plot
p11 <- ggplot(data = dat4_3[-14,]) +
geom_line(aes(x = iter,y = y,color = "nonzeros in q"),size = 1) +
geom_line(aes(x = iter,y = q,color = "nonzeros in y"),size = 1) +
geom_line(aes(x = iter,y = ls,color = "line search iterations"),size = 1) +
geom_point(aes(x = iter,y = y,color = "nonzeros in q"),
shape = 20,size = 3) +
geom_point(aes(x = iter,y = q,color = "nonzeros in y"),
shape = 20,size = 3) +
geom_point(aes(x = iter,y = ls,color = "line search iterations"),
shape = 20,size = 3) +
scale_x_continuous(breaks = c(1,5,10,13)) +
scale_y_continuous(breaks = c(0,5,10)) +
scale_color_manual(values = c("limegreen","darkblue","skyblue"),
name = "") +
labs(x     = "SQP iteration",
y     = "count",
title = "Important numbers in each iteration") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.4,0.89))
# Create a plot comparing the runtime.
p13 <- ggplot(data = dat3_1) +
geom_line(aes(x = m,y = s/m,color = "GIANT data"),size = 1) +
geom_line(aes(x = m,y = s2/m,color = "Synthetic data"),size = 1) +
geom_point(aes(x = m,y = s/m, color = "GIANT data"),
shape = 20,size = 3) +
geom_point(aes(x = m,y = s2/m,color = "Synthetic data"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(trans="log2",breaks=c(0.5,0.25,0.125,0.0625,0.03125,1)) +
scale_color_manual(values = colors[c(6,2)],name = "") +
labs(x     = "number of cols in L (m)",
y     = "effective rank/true rank (rank/m)",
title = "Ratio of effective rank to true rank") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.3))
# Create a plot.
p14 <- ggplot(data = dat3_2) +
geom_line(aes(x = m,y = rel_err,color = "||x_IP - x_SQP||_1"),size = 1) +
geom_point(aes(x = m,y = rel_err,color = "||x_IP - x_SQP||_1"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(breaks = c(-8,-7,-6,-5)) +
scale_color_manual(values = colors[3],name = "") +
ylim(-8,-4) +
labs(x     = "number of cols in L (m)",
y     = "log10 of l1 difference (log10(diff))",
title = "L1 difference between solutions") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(.1,.9))
# Create a plot.
p15 <- ggplot(data = dat3_3) +
geom_line(aes(x = m,y = err,color = "|f(x_REBayes) - f(x_SQP)|"),
size = 1) +
geom_point(aes(x = m,y = err,color = "|f(x_REBayes) - f(x_SQP)|"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(breaks = c(-16,-14,-12,-10,-8,-6)) +
scale_color_manual(values = colors[5],name = "") +
ylim(-16,-6) +
labs(x     = "number of cols in L (m)",
y     = "log10 of difference (log10(diff))",
title = "Difference between two objective values from") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(.1,.9))
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 7)
ggsave("../output/F2.pdf",plot_grid(p3,p4),height = 4,width = 8)
ggsave("../output/F3.pdf",plot_grid(p13,p14,p15,nrow = 1),
height = 4,width = 12)
ggsave("../output/F4.pdf",plot_grid(p9,p10,p11,nrow = 1),height = 3.5,
width = 10.5)
ggsave("../output/F5.pdf",p7,height = 4,width = 7)
ggsave("../output/F6.pdf",plot_grid(p5,p6),height = 4,width = 8)
# Script to generate the plots for the paper.
# SET UP ENVIRONMENT
# ------------------
library(ggplot2)
library(cowplot)
# Colors used in some of the plots below.
colors <- c("#E69F00","#56B4E9","#009E73","#F0E442",
"#0072B2","#D55E00","#CC79A7")
# LOAD RESULTS
# ------------
# Load the results generated by Youngseok.
load("../output/results_for_plots.RData")
# CREATE PLOTS
# ------------
# Prepare the results for the first plot.
pdat <- with(dat1,
rbind(data.frame(formulation = "Dual(linear constraint)",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t1),
data.frame(formulation = "Primal(simplex constraint)",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t2),
data.frame(formulation = "Primal(nonnegative constraint)",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t3),
data.frame(formulation = "Dual(linear constraint)",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t4),
data.frame(formulation = "Primal(simplex constraint)",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t5),
data.frame(formulation = "Primal(nonnegative constraint)",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t6),
data.frame(formulation = "Dual(linear constraint)",
method      = "IP (KWDual/Rmosek)",
n = n,runtime = t7)))
# Create a plot comparing the computation time for solving three
# different formulations of the maximum-likelihood estimation problem
# with MOSEK (in JuMP) and the SQP algorithm: (1) the dual problem,
# (2) the primal problem with simple constraints, and (3) the primal
# problem with non-negativity constraints.
p1 <- ggplot(data = pdat,aes(x = n,y = runtime,color = method,
shape = formulation)) +
geom_line(size = 0.5) +
geom_point(size = 1.5) +
scale_x_continuous(trans = "log10",breaks = c(40,100,1e3,1e4)) +
scale_y_continuous(trans = "log10",breaks = c(0.01,0.1,1,10,100)) +
scale_color_manual(values = c(colors[1:2],"darkblue")) +
scale_shape_manual(values = c(2,5,19)) +
labs(x     = "number of rows (n)",
y     = "runtime (seconds)",
title = "Complexity of solving different problem formulations") +
theme_cowplot(font_size = 12) +
theme(#legend.position = c(0,0.75),
plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.text     = element_text(size = 10))
# Create a plot.
p3 <- ggplot(data = dat2_1) +
geom_line(aes(x = n,y = t1,color = "No approx."),size = 1) +
geom_line(aes(x = n,y = t2,color = "tSVD"),size = 1) +
geom_line(aes(x = n,y = t3,color = "RRQR"),size = 1) +
geom_point(aes(x = n,y = t1,color = "No approx."),size = 3,shape = 20) +
geom_point(aes(x = n,y = t2,color = "tSVD"),size = 3,shape = 20) +
geom_point(aes(x = n,y = t3,color = "RRQR"),size = 3,shape = 20) +
scale_x_continuous(trans = "log10",breaks = c(2e3,1e4,1e5,1e6)) +
scale_y_continuous(trans = "log10",breaks = c(0.01,0.1,1,10,100)) +
scale_color_manual(values = colors[c(1:2,6)],name = "") +
labs(x     = "number of data matrix rows (n)",
y     = "computation time (seconds)",
title = "SQP with different low-rank approximations") +
theme_cowplot(font_size = 12) +
theme(legend.position = c(0.1,0.9),
plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank())
# Create a plot comparing the accuracy of QR and SVD reconstructions
# of the matrix.
p4 <- ggplot(data = dat2_2) +
geom_point(aes(x = n,y = 10^svd,color = "SVD",shape = "SVD"),size = 2) +
geom_point(aes(x = n,y = 10^qr,color = "QR",shape = "QR"),size = 2) +
scale_x_continuous(trans = "log10",breaks = c(2e3,1e4,1e5,1e6)) +
scale_color_manual(values = colors[c(2,6)],name = "") +
scale_shape_manual(values = c(19,4)) +
labs(x = "number of data matrix rows (n)",
y = "norm of exact L - approx. L",
title = "Error in low-rank approximation of L") +
theme_cowplot(font_size = 12) +
theme(legend.position = c(0.1,0.9),
plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank()) +
guides(color = FALSE,shape = FALSE)
# Prepare the results for the next two plots. In particular, I merge
# the mix-SQP and REBayes results, and change the order of the factor
# levels for a more logical ordering in the plots below.
levels(dat6_1$label) <-
c("posterior calculations","model fitting (mix-SQP)",
"QR factorization","likelihood computation")
levels(dat6_2$label) <-
c("posterior calculations","model fitting (REBayes)",
"likelihood computation")
dat6_1 <- transform(dat6_1,
label = factor(as.character(label),
c("QR factorization",
"model fitting (mix-SQP)",
"posterior calculations",
"likelihood computation")))
pdat <- rbind(transform(dat6_1,
x     = x - 5e3,
label = as.character(label)),
transform(dat6_2,
x     = as.numeric(as.character(x)) + 5e3,
label = as.character(label)))
pdat <- transform(pdat,
label = factor(label,c("QR factorization",
"model fitting (REBayes)",
"model fitting (mix-SQP)",
"posterior calculations",
"likelihood computation")))
# Create a plot showing the computation breakdown of adaptive
# shrinkage with the REBayes (MOSEK) and mix-SQP solvers used to
# implement the model fitting.
p5 <- ggplot(pdat,aes(x = x,y = y,fill = label)) +
geom_col(position = "stack",width = 7e3) +
scale_fill_manual(name = "",
values = c("lightskyblue","orange","orangered","aliceblue",
"lightsteelblue")) +
scale_x_continuous(breaks = seq(5e4,25e4,5e4)) +
labs(x = "number of data matrix rows (n)",
y = "computation time (seconds)",
title = "Breakdown of adaptive shrinkage computation") +
theme_cowplot(font_size = 12) +
theme(legend.position = c(.05,0.85),
plot.title   = element_text(face = "plain",size = 12),
axis.line    = element_blank(),
axis.ticks.x = element_blank())
# This is a zoomed-in version of the previous plot, for the mix-SQP
# results only.
p6 <- ggplot(dat6_1,aes(x = x,y = y,fill = label)) +
geom_col(position = "stack",width = 7e3) +
scale_fill_manual(name = "",
values = c("lightskyblue","orangered","aliceblue","lightsteelblue")) +
scale_x_continuous(breaks = seq(5e4,25e4,5e4)) +
labs(x = "number of data matrix rows (n)",
y = "computation time (seconds)",
title = "Zoomed version: mix-SQP only)") +
theme_cowplot(font_size = 12) +
theme(legend.position = c(.05,0.9),
plot.title   = element_text(face = "plain",size = 12),
axis.line    = element_blank(),
axis.ticks.x = element_blank())
# Create a plot showing the runtimes for the mix-SQP and REBayes
# (MOSEK) methods on simulated data sets with different numbers of
# samples (n) and different numbers of mixture components (m).
pdat <- data.frame(n      = rep(2^dat5$n,8),
m      = factor(rep(c(100,200,400,800),each = 20)),
solver = rep(rep(c("REBayes","mix-SQP"),each = 10),4),
time   = do.call(c,dat5[-(1:3)]))
p7 <- ggplot(data = pdat,aes(x = n,y = time,color = m,shape = solver)) +
geom_line(size = 0.5) +
geom_point(size = 2) +
scale_x_continuous(trans = "log10",breaks = c(2e3,1e4,1e5,1e6)) +
scale_y_continuous(trans = "log10",breaks = c(0.01,0.1,1,10,100,1e3)) +
scale_color_manual(values = c("lightskyblue","cornflowerblue",
"mediumblue","darkblue"),
name  = "m (num. cols)") +
labs(x = "n (number of rows in L)",
y = "runtime (seconds)",
title = "Computation time of mix-SQP versue REBayes") +
theme_cowplot(font_size = 12) +
theme(plot.title   = element_text(face = "plain",size = 12),
axis.line    = element_blank())
# Create a plot comparing the number of columns in the data matrix (L)
# against the "effective" rank of L.
p8 <- ggplot(data = dat3_1) +
geom_line(aes(x = m,y = s,color = "synthetic"), size = 1) +
geom_line(aes(x = m,y = s2,color = "GIANT"), size = 1) +
geom_point(aes(x = m,y = s,color = "synthetic"), size = 3,shape = 20) +
geom_point(aes(x = m,y = s2,color = "GIANT"), size = 3,shape = 20) +
scale_x_continuous(trans = "log10",limits = c(20,1000),
breaks = c(20,100,1000)) +
scale_y_continuous(breaks = c(0,10,20,30),limits = c(0,31)) +
scale_color_manual(values = colors,name = "data") +
labs(x = "number of columns of L (m)",
y = "numeric rank of L",
title = "Effective numeric rank of L") +
theme(plot.title   = element_text(face = "plain",size = 12),
axis.line    = element_blank(),
axis.ticks.x = element_blank(),
legend.position = c(0.6,0.2))
# Create a plot comparing the runtime of the interior-point (MOSEK)
# and active-set methods for solving the QP subproblem.
p9 <- ggplot(data = dat4_1) +
geom_line(aes(x = m,y = t1,color = "interior point (MOSEK)"),size = 1) +
geom_line(aes(x = m,y = t2,color = "active-set"),size = 1) +
geom_point(aes(x = m,y = t1,color = "interior point (MOSEK)"),
shape = 20,size = 3) +
geom_point(aes(x = m,y = t2,color = "active-set"),shape = 20,size = 3) +
scale_x_continuous(trans = "log10",breaks = c(10,30,100,500)) +
scale_y_continuous(trans = "log10",breaks = c(0.0002,0.001,0.005,0.025,0.125,0.625)) +
scale_color_manual(values = colors[c(6,2)],name = "") +
labs(x     = "number of columns in L (m)",
y     = "runtime (seconds)",
title = "Average time solving the QP subproblem in m") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.9))
# Create a plot comparing the runtime
p10 <- ggplot(data = dat4_2) +
geom_line(aes(x = n,y = t1,color = "interior point (MOSEK)"),size = 1) +
geom_line(aes(x = n,y = t2,color = "active-set"),size = 1) +
geom_point(aes(x = n,y = t1,color = "interior point (MOSEK)"),
shape = 20,size = 3) +
geom_point(aes(x = n,y = t2,color = "active-set"),shape = 20,size = 3) +
scale_x_continuous(trans = "log10",breaks = c(1e3,1e4,4e5)) +
scale_y_continuous(trans = "log10",breaks = c(0.0005,0.001,0.002,0.004),limits=c(0.0004,0.004)) +
scale_color_manual(values = colors[c(6,2)],name = "") +
labs(x     = "number of rows in L (n)",
y     = "runtime (seconds)",
title = "Average time solving the QP subproblem in n") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.5))
# Create a plot
p11 <- ggplot(data = dat4_3[-14,]) +
geom_line(aes(x = iter,y = y,color = "nonzeros in q"),size = 1) +
geom_line(aes(x = iter,y = q,color = "nonzeros in y"),size = 1) +
geom_line(aes(x = iter,y = ls,color = "line search iterations"),size = 1) +
geom_point(aes(x = iter,y = y,color = "nonzeros in q"),
shape = 20,size = 3) +
geom_point(aes(x = iter,y = q,color = "nonzeros in y"),
shape = 20,size = 3) +
geom_point(aes(x = iter,y = ls,color = "line search iterations"),
shape = 20,size = 3) +
scale_x_continuous(breaks = c(1,5,10,13)) +
scale_y_continuous(breaks = c(0,5,10)) +
scale_color_manual(values = c("limegreen","darkblue","skyblue"),
name = "") +
labs(x     = "SQP iteration",
y     = "count",
title = "Important numbers in each iteration") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.4,0.89))
# Create a plot comparing the runtime.
p13 <- ggplot(data = dat3_1) +
geom_line(aes(x = m,y = s/m,color = "GIANT data"),size = 1) +
geom_line(aes(x = m,y = s2/m,color = "Synthetic data"),size = 1) +
geom_point(aes(x = m,y = s/m, color = "GIANT data"),
shape = 20,size = 3) +
geom_point(aes(x = m,y = s2/m,color = "Synthetic data"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(trans="log2",breaks=c(0.5,0.25,0.125,0.0625,0.03125,1)) +
scale_color_manual(values = colors[c(6,2)],name = "") +
labs(x     = "number of cols in L (m)",
y     = "effective rank/true rank (rank/m)",
title = "Ratio of effective rank to true rank") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(0.05,0.3))
# Create a plot.
p14 <- ggplot(data = dat3_2) +
geom_line(aes(x = m,y = rel_err,color = "||x_IP - x_SQP||_1"),size = 1) +
geom_point(aes(x = m,y = rel_err,color = "||x_IP - x_SQP||_1"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(breaks = c(-8,-7,-6,-5)) +
scale_color_manual(values = colors[3],name = "") +
ylim(-8,-4) +
labs(x     = "number of cols in L (m)",
y     = "log10 of l1 difference (log10(diff))",
title = "L1 difference between solutions") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(.1,.9))
# Create a plot.
p15 <- ggplot(data = dat3_3) +
geom_line(aes(x = m,y = err,color = "|f(x_REBayes) - f(x_SQP)|"),
size = 1) +
geom_point(aes(x = m,y = err,color = "|f(x_REBayes) - f(x_SQP)|"),
shape = 20,size = 3) +
scale_x_continuous(trans = "log2",breaks = c(25,50,100,200,400,800)) +
scale_y_continuous(breaks = c(-16,-14,-12,-10,-8,-6)) +
scale_color_manual(values = colors[5],name = "") +
ylim(-16,-6) +
labs(x     = "number of cols in L (m)",
y     = "log10 of difference (log10(diff))",
title = "Difference between two objective values") +
theme(plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.position = c(.1,.9))
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 7)
ggsave("../output/F2.pdf",plot_grid(p3,p4),height = 4,width = 8)
ggsave("../output/F3.pdf",plot_grid(p13,p14,p15,nrow = 1),
height = 4,width = 12)
ggsave("../output/F4.pdf",plot_grid(p9,p10,p11,nrow = 1),height = 3.5,
width = 10.5)
ggsave("../output/F5.pdf",p7,height = 4,width = 7)
ggsave("../output/F6.pdf",plot_grid(p5,p6),height = 4,width = 8)
# results only.
p6 <- ggplot(dat6_1,aes(x = x,y = y,fill = label)) +
geom_col(position = "stack",width = 7e3) +
scale_fill_manual(name = "",
values = c("lightskyblue","orangered","aliceblue","lightsteelblue")) +
scale_x_continuous(breaks = seq(5e4,25e4,5e4)) +
labs(x = "number of data matrix rows (n)",
y = "computation time (seconds)",
title = "Zoomed version: mix-SQP only") +
theme_cowplot(font_size = 12) +
theme(legend.position = c(.05,0.9),
plot.title   = element_text(face = "plain",size = 12),
axis.line    = element_blank(),
axis.ticks.x = element_blank())
ggsave("../output/F6.pdf",plot_grid(p5,p6),height = 4,width = 8)
save.image("~/git/mixopt-paper/output/results_for_plots.RData")
dat3_1
#####################################################################################
## download & process the fMRI data
#####################################################################################
# data from http://www.cs.cmu.edu/afs/cs.cmu.edu/project/theo-81/www/
# info about the original data format: http://www.cs.cmu.edu/afs/cs.cmu.edu/project/theo-81/www/README-data-documentation.txt
# this script will download and store the following data (from a single subject in the fMRI study):
# ROI_names = vector of names of each region of interest (ROI), length 23
# ROI_voxels = vector assigning each voxel to an ROI (note that some voxels have a 0, if not assigned to any ROI), length 4698
# voxel_coords = 4698-by-3 matrix giving the 3D coordinates of each voxel
# whichfirst = length 40 vector. there are 40 trials, and each one has 54 images taken
# if whichfirst[i] = 0: this means that trial i has
# 	first 8 images w/ picture displayed; 8 images w/ no stimulus; 8 images w/ sentence displayed; 30 images w/ no stimulus
# if whichfirst[i] = 1: this means that trial i has
#   first 8 images w/ sentence displayed; 8 images w/ no stimulus; 8 images w/ picture displayed; 30 images w/ no stimulus
# voxel_activity[[i]] = 54-by-4698 matrix giving the measured activity level for each voxel at each timepoint during trial #i
# picture_sentence_agree[i] 0 or 1 indicating whether the picture & sentence are in agreement or not in trial #i.
# (The subject's task was to push a button indicating Yes or No)
if(!require(R.matlab)){
install.packages("R.matlab")
}
library("R.matlab")
### Download CMU StarPlus fMRI data (subject 04847) from web
download.file(url = "http://www.cs.cmu.edu/afs/cs.cmu.edu/project/theo-81/www/data-starplus-04847-v7.mat", destfile = "./fMRI_data.mat")
Subject = readMat("./fMRI_data.mat")
n = Subject$meta[[3]] # number of voxels = 4698
voxel_coords = Subject$meta[[1]] # n-by-3 matrix with voxel_coords[i,] = (x,y,z) coordinates of voxel #i
### organize labels of each voxel into the Regions Of Interest (ROIs)
ROI_names = unlist(Subject$meta[[16]][1,,])[-4]
# removing ROI #4 because it is not assigned to any voxels in the data set
ROI_voxels = rep(0,n); for(i in 1:n){tmp = which(ROI_names == c(Subject$meta[[17]][[i]][[1]])); if(length(tmp)>0){ROI_voxels=tmp}} # ROI_voxels[i] = 0 if voxel i is not assigned to any ROI
voxel_activity = list()
whichfirst = picture_sentence_agree = rep(0,40)
i = 0
for(ind in which(Subject$info[1,,]>1)){
i = i+1
voxel_activity[[i]] = Subject$data[[ind]][[1]][1:54,] # discarding data after 54th image to make them all the same length
whichfirst[i] = (Subject$info[14,,ind]=='S')
picture_sentence_agree[i] = (Subject$info[1,,ind]==2)
}
#####################################################################################
## function for displaying fMRI data
#####################################################################################
# the following function may be useful for visualizing & displaying data and results
# the function inputs a length-4698 vector x, with x[i] corresponding to the value at voxel #i, and plots it on its 3D coordinates
# here black = highest values & white = lowest values (note that missing voxels also appear as white)
# you can also use it to plot results, e.g. to plot a pvalue obtained at each voxel
plot_brain_img = function(x,zlim=NULL){
img_gap = 4
if(length(zlim)==0){zlim=range(x)}
voxel_coords = voxel_coords - rep(1,n)%*%t(apply(voxel_coords,2,min)) + 1
nx = max(voxel_coords[,1]); ny = max(voxel_coords[,2]); nz = max(voxel_coords[,3])
img_matrix = matrix(zlim[1],ny*nz + img_gap*nz,nx + 2 * img_gap)
for(i in 1:n){
img_matrix[voxel_coords[i,2] + (ny+ img_gap) * (voxel_coords[i,3]-1), voxel_coords[i,1] + img_gap] = x[i]
}
image(img_matrix,col=gray((100:0)/100),axes=FALSE,zlim=zlim); box()
}
# an example: plotting activity level at the first timepoint of the first trial
plot_brain_img(voxel_activity[[1]][1,])
# a caution: if you look at plot_brain_img(x1) and plot_brain_img(x2), a voxel may appear different shades of gray in the two plots but be the same;
#   this is because the grayscale is set relative to the range of x1 values & relative to the range of x2 values
# if you want to avoid this problem, do:
plot_brain_img(voxel_activity[[1]][1,], zlim=c(-15,15))
# where zlim is the range of values you want to allow in the plot --- by taking the same zlim for plotting x1 & x2, now you can compare directly
# note that x values outside the zlim range would get truncated to the endpoints of the range for plotting
str(voxel_activity)
whichfirst
str(Subject)
ROI_names
ROI_voxels
whichfirst
ROI_names
str(voxel_activity[[1]])
sqrt(4698)
voxel_activity[[1]][1,]
sqrt(4698)
ROI_names = unlist(Subject$meta[[16]][1,,])[-4]
ROI_names
ROI_voxels = rep(0,n); for(i in 1:n){tmp = which(ROI_names == c(Subject$meta[[17]][[i]][[1]])); if(length(tmp)>0){ROI_voxels=tmp}} # ROI_voxels[i] = 0 if voxel i is not assigned to any ROI
ROI_voxels
voxel_coords
Subject$info[1,,]
str(subject)
str(Subject)
Subject$meta[[16]]
str(Subject$meta[[16]])
Subject$meta[[16]]
Subject$meta[[16]][,,1]
Subject$meta[[16]][,,1]$columns
ind = Subject$meta[[16]][,,1]$columns
ind
voxel_activity
str(voxel_activity)
voxel_activity

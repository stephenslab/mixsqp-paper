install.packages("devtools")
devtools::install_github("jdblischak/workflowr",build_vignettes = TRUE)
A = matrix(rnorm(10*20),nrow = 10)
A
A[-2,,drop = FALSE]
A[,-2,drop = FALSE]
colMeans(A)
A
outer(rep(1,nrow(A)), 1/colMeans(A))
colMeans(A)
require(ashr)
autoselect.mixsd
autoselect.mixsd
ashr
devtools::install_github("stephens999/ashr")
require(ashr)
?autoselect.mixsd
library("ashr")
autoselect.mixsd
ash()
ash
biocLite("pcaMethods")
source("https://bioconductor.org/biocLite.R")
biocLite("pcaMethods")
browseVignettes("pcaMethods")
install.packages('irlba')
set.seed(1)
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
u <- u / drop(sqrt(crossprod(u)))
v <- v / drop(sqrt(crossprod(v)))
x <- u %*% t(v) + 0.001 * matrix(rnorm(200*300), ncol=300)
s <- ssvd(x, n=50)
s <- irlba::ssvd(x, n=50)
s
crossprod()
?crossprod
?crossprod(u)
crossprod(u)
crossprod(v)
drop(sqrt(crossprod(v)))
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
drop(sqrt(crossprod(u)))
set.seed(1)
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
u <- u / drop(sqrt(crossprod(u)))
v <- v / drop(sqrt(crossprod(v)))
x <- u %*% t(v) + 0.01 * matrix(rnorm(200*300), ncol=300)
s <- irlba::ssvd(x, n=50)
s
using(Rmosek)
library(Rmosek)
install.package("Rmosek")
install.packages("Rmosek")
Sys.setenv(PATH=paste(Sys.getenv('PATH'), paste(Sys.getenv('HOME'), 'mosek/8/tools/platform/osx64x86/bin', sep='/'), sep=":"))
install.packages("Rmosek", type="source", repos="http://download.mosek.com/R/8")
require(Rmosek)
lo1 <- list()
lo1$sense <- "max"
lo1$c <- c(3,1,5,1)
lo1$A <- Matrix(c(3,1,2,0,
2,1,3,1,
0,2,0,3), nrow=3, byrow=TRUE, sparse=TRUE)
lo1$bc <- rbind(blc = c(30,15,-Inf),
buc = c(30,Inf,25))
lo1$bx <- rbind(blx = c(0,0,0,0),
bux = c(Inf,10,Inf,Inf))
r <- mosek(lo1)
require(Rmosek)
require(Rmosek)
lo1 <- list()
lo1$sense <- "max"
lo1$c <- c(3,1,5,1)
lo1$A <- Matrix(c(3,1,2,0,
2,1,3,1,
0,2,0,3), nrow=3, byrow=TRUE, sparse=TRUE)
lo1$bc <- rbind(blc = c(30,15,-Inf),
buc = c(30,Inf,25))
lo1$bx <- rbind(blx = c(0,0,0,0),
bux = c(Inf,10,Inf,Inf))
r <- mosek(lo1)
install.packages("varbvs")
varbvs
require(varbvs)
ls
?varbvs
install.packages("glmnet")
library(Rmosek)
set.seed(2017)
test0 = function(n,m){
n = n/3
z = c(rt(n,df=2),2*rt(n,df=4),4*rt(n,df=6))
z = z[order(abs(z))]
data = ashr::set_data(z,1)
grid = ashr:::autoselect.mixsd(data, mult=m, mode=0, mixcompdist = "normal", grange = c(-Inf,Inf))
grid = c(0,grid)
k = length(grid)
g  = ashr::normalmix(rep(1/k,k),rep(0,k),grid)
llik <- t(ashr:::log_comp_dens_conv.normalmix(g,data))
L = llik - apply(llik, 1, max)
L = exp(L)
return(L)
}
test1 = function(A, sparse = TRUE){
rtol = 1e-6
n <- nrow(A)
m <- ncol(A)
A <- t(A)
C <- rep(0,n)
P <- list(sense = "min")
P$c <- C
P$A <- Matrix::Matrix(A, sparse = sparse)
P$bc <- rbind(rep(0,m),rep(1,m))
P$bx <- rbind(rep(0,n),rep(Inf,n))
opro <- matrix ( list (), nrow =5, ncol = n)
rownames ( opro ) <- c(" type ","j","f","g","h")
opro[1,] <-  as.list(rep('log',n))
opro[2,] <-  as.list(1:n)
opro[3,] <-  as.list(-rep(1,n)/n)
opro[4,] <-  as.list(rep(1,n))
opro[5,] <-  as.list(rep(0,n))
P$scopt<- list(opro = opro)
P$dparam$intpnt_nl_tol_rel_gap <- rtol
z <- Rmosek::mosek(P, opts = list(verbose = 0))
if(z$response$code != 0)
stop(paste("Mosek error: ", z$response$msg))
status <- z$sol$itr$solsta
if (status != "OPTIMAL")
warning(paste("Solution status = ", status))
f <- z$sol$itr$suc
if(min(f) < 0) warning("estimated mixing distribution has some negative values:
consider reducing rtol")
g <- as.vector(t(A) %*% (f * rep(1,m)))
list(f = f, g = g, status = status)
}
t1 = system.time(L <- test0(100000,1.15))[3]
t2 = system.time(x <- test1(L))[3]
t1
t2
?flash_r1
library("flashr")
set.seed(10)
l = c(rep(0,500),rnorm(500))
f = rnorm(2000)
LF = outer(l,f)
Y = LF + rnorm(1000*2000)
data = flash_set_data(Y)
f1 = flash_r1(data)
?flash
?flash_r1
library("flashr")
set.seed(10)
l = c(rep(0,50000),rnorm(50000))
f = rnorm(2000)
LF = outer(l,f)
Y = LF + rnorm(100000*2000)
data = flash_set_data(Y)
f1 = flash_r1(data)
install.packages("elasticnet")
library(elasticnet)
install.packages("elasticnet")
library(elasticnet)
set.seed(1)
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
u <- u / drop(sqrt(crossprod(u)))
v <- v / drop(sqrt(crossprod(v)))
x <- v %*% t(v) + 0.01 * matrix(rnorm(200*300), ncol=300)
spca(x)
install.packages("elasticnet")
set.seed(1)
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
u <- u / drop(sqrt(crossprod(u)))
v <- v / drop(sqrt(crossprod(v)))
x <- v %*% t(v) + 0.01 * matrix(rnorm(200*300), ncol=300)
spca(x)
set.seed(1)
u <- matrix(rnorm(200), ncol=1)
v <- matrix(c(runif(50, min=0.1), rep(0,250)), ncol=1)
u <- u / drop(sqrt(crossprod(u)))
v <- v / drop(sqrt(crossprod(v)))
x <- v %*% t(v) + 0.01 * matrix(rnorm(300*300), ncol=300)
spca(x)
spca(x, K = 1)
load("~/git/mixopt-paper/output/results_for_plots.RData")
pdat <- with(dat1,
rbind(data.frame(formulation = "dual",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t1),
data.frame(formulation = "simplex-constrained",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t2),
data.frame(formulation = "non-negatively-constrained",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t3),
data.frame(formulation = "dual",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t4),
data.frame(formulation = "simplex-constrained",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t5),
data.frame(formulation = "non-negatively-constrained",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t6),
data.frame(formulation = "dual",
method      = "REBayes (KWDual/Rmosek)",
n = n,runtime = t7)))
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 8)
library(ggplot2)
library(cowplot)
library(ggplot2)
library(cowplot)
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 8)
setwd("~/git/mixopt-paper")
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 8)
p1
pdat <- with(dat1,
rbind(data.frame(formulation = "dual",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t1),
data.frame(formulation = "simplex-constrained",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t2),
data.frame(formulation = "non-negatively-constrained",
method      = "IP (JuMP/MOSEK)",
n = n,runtime = t3),
data.frame(formulation = "dual",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t4),
data.frame(formulation = "simplex-constrained",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t5),
data.frame(formulation = "non-negatively-constrained",
method      = "SQP (JuMP/MOSEK)",
n = n,runtime = t6),
data.frame(formulation = "dual",
method      = "REBayes (KWDual/Rmosek)",
n = n,runtime = t7)))
p1 <- ggplot(data = pdat,aes(x = n,y = runtime,color = method,
shape = formulation)) +
geom_line(size = 1) +
geom_point(size = 3) +
scale_x_continuous(trans = "log10",breaks = c(40,100,1e3,1e4)) +
scale_y_continuous(trans = "log10",breaks = c(0.01,0.1,1,10,100)) +
scale_color_manual(values = c(colors[1:2],"darkblue")) +
scale_shape_manual(values = c(8,1,19)) +
labs(x     = "number of rows (n)",
y     = "runtime (seconds)",
title = "Complexity of solving different problem formulations") +
theme_cowplot(font_size = 12) +
theme(#legend.position = c(0,0.75),
plot.title      = element_text(face = "plain",size = 12),
axis.line       = element_blank(),
legend.text     = element_text(size = 10))
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 8)
p1
getwd()
setwd("~/git/mixopt-paper/analysis")
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 8)
# SAVE PLOTS AS PDFs
# ------------------
ggsave("../output/F1.pdf",p1,height = 4,width = 7)
save.image("~/git/mixopt-paper/output/results_for_plots.RData")
